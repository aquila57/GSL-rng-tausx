1c1
< /* rng/tausx.c
---
> /* rng/taus.c
3,8d2
<  * Copyright (C) 2020  aquila57 at github.com
<  * 
<  * This is an an extension to taus.c with a Bays-Durham shuffle.
<  *
<  * Copyright for taus.c:
<  *
31,34c25
<    generator. The sequence for tausx_get() is,
< 
<    x_{n-2} = x_{n-1}
<    x_{n-1} = x_n
---
>    generator. The sequence is,
42,46d32
<    index = x_{x-2} >> 18
<    temp = sx[index]
<    sx[index] = x_n
<    x_n = temp
< 
53,56d38
<    sx is a random list of 16384 32-bit numbers.
<    temp is a temporary 32-bit number.
<    index is a 32-bit signed integer as a subscript to sx.
< 
61,71c43,47
<    After s1, s2, and s3 have been initialized as with taus2, the array sx
<    is initialized by performing the Tausworthe algorithm for each element
<    in the array.
< 
<    The theoretical value of x_{17391} is 1132370745.  The subscript
<    17391 means (1) seed the generator with s=1 (2) do six warm-up
<    iterations, (3) initialize sx, (4) then do 10000 actual iterations.
< 
<    The period of this generator approximates the factorial of 16384,
<    or 10^61036.  It is orders of magnitude greater than the period
<    of the original taus generator.
---
>    The theoretical value of x_{10007} is 2733957125. The subscript
>    10007 means (1) seed the generator with s=1 (2) do six warm-up
>    iterations, (3) then do 10000 actual iterations.
> 
>    The period of this generator is about 2^88.
107,109c83,85
< static inline unsigned long int tausx_get (void *vstate);
< static double tausx_get_double (void *vstate);
< static void tausx_set (void *state, unsigned long int s);
---
> static inline unsigned long int taus_get (void *vstate);
> static double taus_get_double (void *vstate);
> static void taus_set (void *state, unsigned long int s);
114,119d89
<     unsigned long int xpp;        /* x_{n-2}           */
<     unsigned long int xp;         /* x_{n-1}           */       
<     unsigned long int xn;         /* s1^s2^s3          */
<     unsigned long int ix;         /* index to sx array */       
<     unsigned long int tx;         /* temporary xn      */       
<     unsigned long int sx[16384];     /* shuffle array  */
121c91
< tausx_state_t;
---
> taus_state_t;
123c93,94
< static inline unsigned long tausx_get (void *vstate)
---
> static inline unsigned long
> taus_get (void *vstate)
125,126c96
< 
<   tausx_state_t *state = (tausx_state_t *) vstate;
---
>   taus_state_t *state = (taus_state_t *) vstate;
131,133d100
<   state->xpp = state->xp;
<   state->xp  = state->xn;
< 
138,144c105
<   state->xn  = (state->s1 ^ state->s2 ^ state->s3);
<   state->ix = state->xpp >> 18;
<   state->tx = state->sx[state->ix];
<   state->sx[state->ix] = state->xn;
<   state->xn = state->tx;
< 
<   return state->xn;
---
>   return (state->s1 ^ state->s2 ^ state->s3);
147c108,109
< static double tausx_get_double (void *vstate)
---
> static double
> taus_get_double (void *vstate)
149c111
<   return tausx_get (vstate) / 4294967296.0 ;
---
>   return taus_get (vstate) / 4294967296.0 ;
152c114,115
< static void tausx_set (void *vstate, unsigned long int s)
---
> static void
> taus_set (void *vstate, unsigned long int s)
154c117
<   tausx_state_t *state = (tausx_state_t *) vstate;
---
>   taus_state_t *state = (taus_state_t *) vstate;
159c122,143
< /* The following is the taus2 adjustment to the initial seeds */
---
> #define LCG(n) ((69069 * n) & 0xffffffffUL)
>   state->s1 = LCG (s);
>   state->s2 = LCG (state->s1);
>   state->s3 = LCG (state->s2);
> 
>   /* "warm it up" */
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   return;
> }
> 
> static void
> taus2_set (void *vstate, unsigned long int s)
> {
>   taus_state_t *state = (taus_state_t *) vstate;
> 
>   if (s == 0)
>     s = 1;      /* default seed is 1 */
169,189d152
<   inline void tausx_get_simple(tausx_state_t *state)
<      {
< #define MASK 0xffffffffUL
< #define TAUSWORTHE(s,a,b,c,d) (((s &c) <<d) &MASK) ^ ((((s <<a) &MASK)^s) >>b)
<      state->s1 = TAUSWORTHE (state->s1, 13, 19, 4294967294UL, 12);
<      state->s2 = TAUSWORTHE (state->s2, 2, 25, 4294967288UL, 4);
<      state->s3 = TAUSWORTHE (state->s3, 3, 11, 4294967280UL, 17);
<      } /* tausx_get_simple(state) */
< 
<   inline void tausx_init_array(tausx_state_t *state)
<      {
<      unsigned long int *p,*q;
<      p = (unsigned long int *) state->sx;
<      q = (unsigned long int *) state->sx + 16384;
<      while (p < q)
<         {
<         tausx_get_simple (state);
< 	*p++ = (state->s1 ^ state->s2 ^ state->s3);
< 	} /* for each element in shuffle array */
<      } /* tausx_init_array(state) */
< 
191,199c154,159
<   tausx_get_simple (state);
<   tausx_get_simple (state);
<   tausx_get_simple (state);
<   tausx_get_simple (state);
<   tausx_get_simple (state);
<   tausx_get_simple (state);
<   /* initialize the Bays-Durham shuffle array  */
<   /* to random 32-bit non-zero numbers         */
<   tausx_init_array (state);
---
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
>   taus_get (state);
203,204c163,176
< static const gsl_rng_type tausx_type =
< {"tausx",                       /* name */
---
> 
> static const gsl_rng_type taus_type =
> {"taus",                        /* name */
>  0xffffffffUL,                  /* RAND_MAX */
>  0,                             /* RAND_MIN */
>  sizeof (taus_state_t),
>  &taus_set,
>  &taus_get,
>  &taus_get_double};
> 
> const gsl_rng_type *gsl_rng_taus = &taus_type;
> 
> static const gsl_rng_type taus2_type =
> {"taus2",                       /* name */
207,210c179,182
<  sizeof (tausx_state_t),
<  &tausx_set,
<  &tausx_get,
<  &tausx_get_double};
---
>  sizeof (taus_state_t),
>  &taus2_set,
>  &taus_get,
>  &taus_get_double};
212c184
< const gsl_rng_type *gsl_rng_tausx = &tausx_type;
---
> const gsl_rng_type *gsl_rng_taus2 = &taus2_type;
